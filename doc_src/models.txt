======
Models
======

Calendar
=========

.. py:class:: Calendar

   This is for grouping events so that batch relations can be made to all
   events.  An example would be a project calendar.

   .. py:attribute:: name

      **Required** ``CharField(200)``

      The name of the calendar

   .. py:attribute:: slug

      **Required, Unique** ``SlugField(200)``

      URL-friendly name. It is automatically generated from the name.

   .. py:attribute:: events

      Returns all events on this calendar.

   .. py:method:: create_relation(obj, distinction=None, inheritable=True)

      Creates a :py:class:`CalendarRelation` between this calendar and obj.

      :param Model obj: The object to relate to this calendar
      :param str distinction: A string representing a distinction of the relation, ``User`` could have a 'veiwer' relation and an 'owner' relation for example.
      :param bool inheritable: If ``True`` this relation will cascade to all events related to this calendar.

   .. py:method:: get_recent(amount=5, in_datetime=datetime.datetime.now)

      This shortcut function allows you to get events that have started recently.

      :param int amount: The amount of events you want in the queryset. The default is
        ``5``.

      :param datetime in_datetime: The datetime you want to check against. It defaults to ``datetime.datetime.now``

   .. py:method:: occurences_after(date=None)

      Return all the occurrences after the given date

      :param datetime date: The date after which you want all the occurances
      :returns: :py:class:`EventListManager`

   .. py:method:: get_absolute_url()

      Return the absolute URL for this calendar.

   .. py:method:: add_event_url()

      Return the absolute URL to add an :py:class:`Event` to this :py:class:`Calendar`.


CalendarRelation
================

.. py:class:: CalendarRelation

   This is for relating data to a Calendar, and possible all of the events for that calendar, there is also a distinction, so that the same type or kind of data can be related in different ways.  A good example would be, if you have calendars that are only visible by certain users, you could create a relation between calendars and users, with the distinction of 'visibility', or 'ownership'.  If inheritable is set to true, all the events for this calendar will inherit this relation.

   DISCLAIMER: while this model is a nice out of the box feature to have, it may not scale well.  If you use this, keep that in mind.

   .. py:attribute:: calendar

      **Required** ``ForeignKey(`` :py:class:`Calendar` ``)``

      Foreign key relation to a ``Calendar`` object

   .. py:attribute:: content_type

      **Required** ``ForeignKey(`` :py:class:`ContentType` ``)``

      Foreign key to a ``django.contrib.contenttypes.models.ContentType``

   .. py:attribute:: object_id

     **Required** ``IntegerField``

     The id of the model referenced by :py:attr:`CalendarRelation.content_type`

   .. py:attribute:: content_object

      ``GenericForeignKey``

      Direct reference to the object referenced by :py:attr:`CalendarRelation.content_type` and :py:attr:`CalendarRelation.object_id`

   .. py:attribute:: distinction

      ``CharField(20)``

      A string representing a distinction of the relation. For example, a :py:class:`User` could have a relation with a ``veiwer`` distinction and an ``owner`` distinction.

   .. py:attribute:: inheritable

      ``BooleanField`` *Default:* ``True``

      A boolean that decides if events of the calendar should also inherit this relation

Event
=====

.. py:class:: Event

   This model stores metadata for a date.  You can relate this data to many other models.

   .. py:attribute:: start

      **Required** ``DateTimeField``

      The starting date and time for this event

   .. py:attribute:: end

      **Required** ``DateTimeField``

      The ending date and time for this event

   .. py:attribute:: all_day

      ``BooleanField``

      If ``True`` the event lasts all day.

   .. py:attribute:: title

      **Required** ``CharField(255)``

      The name of the Event

   .. py:attribute:: description

      ``Textfield``

      A description of the event.

   .. py:attribute:: creator

      ``ForeignKey(`` :py:class:`User` ``)``

      Foreign key to a ``django.contrib.auth.models.User`` indicating the user who created this event.

   .. py:attribute:: created_on

      **Required** ``DateTimeField`` *Default:* ``datetime.datetime.now``

      When the event was created

   .. py:attribute:: rule

      ``ForeignKey(`` :py:class:`Rule` ``)``

      How often this event repeats.

   .. py:attribute:: end_recurring_period

      ``DateTimeField``

      The date and time in which the event stops repeating

   .. py:attribute:: calendar

      **Required** ``ForeignKey(`` :py:class:`Calendar` ``)``

      Foreign key relation to a ``Calendar`` object

   .. py:method:: create_relation(obj, distinction=None)

      Creates an :py:class:`EventRelation` between this calendar and obj.

      :param Model obj: The object to relate to this event
      :param str distinction: A string representing a distinction of the relation, ``User`` could have a 'veiwer' relation and an 'owner' relation for example.

   .. py:method:: get_occurrences(start, end)

      Get every occurrence of this event between ``start`` and ``end``.

      :param datetime start: The starting date and time of the period
      :param datetime end: The ending date and time of the period

